buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.file.DuplicatesStrategy
import org.gradle.api.tasks.Copy

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

def modId = 'chickendropfeathersmod'
def mappingsVersion = '1.17.1'
def forgeVersion = '1.17.1-37.1.1'

version = '1.0'
group = "de.axelrindle.${modId}"
archivesBaseName = "ChickenDropFeathers"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

//region Replace tokens

def generatedSrcDir = "$buildDir/generated/java"
def replaceTokens = [
        NAME: archivesBaseName,
        MODID: modId,
        VERSION: version,
        DESCRIPTION: 'Chicken will drop feathers from time to time.',
        PROJECT_URL: 'https://www.curseforge.com/minecraft/mc-mods/chicken-drop-feathers'
]

sourceSets {
    generated {
        java {
            srcDir(generatedSrcDir)
        }
    }
}

task processSources(type: Copy) {
    from sourceSets.main.java
    into "$generatedSrcDir"
    filter(ReplaceTokens, tokens: replaceTokens)
}

compileJava.source = sourceSets.generated.java
compileJava.dependsOn processSources

processResources {
    filter(ReplaceTokens, tokens: replaceTokens)
}

//endregion

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'official', version: mappingsVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', modId, '--all', '--output', file('src/generated/resources/')
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forgeVersion}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": modId,
            "Specification-Vendor": "axelrindle",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"axelrindle",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    archiveFileName.set("${archivesBaseName}-${project.version}-forge-${forgeVersion}.jar")
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')